//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/MainInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MainInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MainInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MainInputActions"",
    ""maps"": [
        {
            ""name"": ""MancheteTyper"",
            ""id"": ""6bb50d10-a79e-4bf6-a73c-849033947531"",
            ""actions"": [
                {
                    ""name"": ""Type"",
                    ""type"": ""Button"",
                    ""id"": ""e167153e-fc65-4fdd-be7d-399418724f27"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9959c61e-329c-4958-b83a-0f53dbd94315"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Type"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Navigation"",
            ""id"": ""61968f21-b5bd-429d-b624-15dc76def397"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""fc67f493-8f3f-40f5-a395-26d6ea26109b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""250d0cc7-8928-4c8d-b1b8-3bc6b28ace3e"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // MancheteTyper
        m_MancheteTyper = asset.FindActionMap("MancheteTyper", throwIfNotFound: true);
        m_MancheteTyper_Type = m_MancheteTyper.FindAction("Type", throwIfNotFound: true);
        // Navigation
        m_Navigation = asset.FindActionMap("Navigation", throwIfNotFound: true);
        m_Navigation_Newaction = m_Navigation.FindAction("New action", throwIfNotFound: true);
    }

    ~@MainInputActions()
    {
        UnityEngine.Debug.Assert(!m_MancheteTyper.enabled, "This will cause a leak and performance issues, MainInputActions.MancheteTyper.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Navigation.enabled, "This will cause a leak and performance issues, MainInputActions.Navigation.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MancheteTyper
    private readonly InputActionMap m_MancheteTyper;
    private List<IMancheteTyperActions> m_MancheteTyperActionsCallbackInterfaces = new List<IMancheteTyperActions>();
    private readonly InputAction m_MancheteTyper_Type;
    public struct MancheteTyperActions
    {
        private @MainInputActions m_Wrapper;
        public MancheteTyperActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Type => m_Wrapper.m_MancheteTyper_Type;
        public InputActionMap Get() { return m_Wrapper.m_MancheteTyper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MancheteTyperActions set) { return set.Get(); }
        public void AddCallbacks(IMancheteTyperActions instance)
        {
            if (instance == null || m_Wrapper.m_MancheteTyperActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MancheteTyperActionsCallbackInterfaces.Add(instance);
            @Type.started += instance.OnType;
            @Type.performed += instance.OnType;
            @Type.canceled += instance.OnType;
        }

        private void UnregisterCallbacks(IMancheteTyperActions instance)
        {
            @Type.started -= instance.OnType;
            @Type.performed -= instance.OnType;
            @Type.canceled -= instance.OnType;
        }

        public void RemoveCallbacks(IMancheteTyperActions instance)
        {
            if (m_Wrapper.m_MancheteTyperActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMancheteTyperActions instance)
        {
            foreach (var item in m_Wrapper.m_MancheteTyperActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MancheteTyperActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MancheteTyperActions @MancheteTyper => new MancheteTyperActions(this);

    // Navigation
    private readonly InputActionMap m_Navigation;
    private List<INavigationActions> m_NavigationActionsCallbackInterfaces = new List<INavigationActions>();
    private readonly InputAction m_Navigation_Newaction;
    public struct NavigationActions
    {
        private @MainInputActions m_Wrapper;
        public NavigationActions(@MainInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Navigation_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Navigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigationActions set) { return set.Get(); }
        public void AddCallbacks(INavigationActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(INavigationActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(INavigationActions instance)
        {
            if (m_Wrapper.m_NavigationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigationActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigationActions @Navigation => new NavigationActions(this);
    public interface IMancheteTyperActions
    {
        void OnType(InputAction.CallbackContext context);
    }
    public interface INavigationActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
